; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=i686-unknown-unknown -mattr=+sse2 | FileCheck %s --check-prefixes=X86,SDAG-X86
; RUN: llc < %s -fast-isel -fast-isel-abort=1 -mtriple=i686-unknown-unknown -mattr=+sse2 | FileCheck %s --check-prefixes=X86,FAST-X86
; RUN: llc < %s -global-isel -global-isel-abort=1 -mtriple=i686-unknown-unknown -mattr=+sse2 | FileCheck %s --check-prefixes=GISEL-X86
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+sse2 | FileCheck %s --check-prefixes=X64,SDAG-X64
; RUN: llc < %s -fast-isel -fast-isel-abort=1 -mtriple=x86_64-unknown-unknown -mattr=+sse2 | FileCheck %s --check-prefixes=X64,FAST-X64
; RUN: llc < %s -global-isel -global-isel-abort=1 -mtriple=x86_64-unknown-unknown -mattr=+sse2 | FileCheck %s --check-prefixes=GISEL-X64

define i128 @add_i128(i128 %x, i128 %y) nounwind {
; SDAG-X86-LABEL: add_i128:
; SDAG-X86:       # %bb.0:
; SDAG-X86-NEXT:    pushl %edi
; SDAG-X86-NEXT:    pushl %esi
; SDAG-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; SDAG-X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; SDAG-X86-NEXT:    movl {{[0-9]+}}(%esp), %edx
; SDAG-X86-NEXT:    movl {{[0-9]+}}(%esp), %esi
; SDAG-X86-NEXT:    movl {{[0-9]+}}(%esp), %edi
; SDAG-X86-NEXT:    addl {{[0-9]+}}(%esp), %esi
; SDAG-X86-NEXT:    adcl {{[0-9]+}}(%esp), %edi
; SDAG-X86-NEXT:    adcl {{[0-9]+}}(%esp), %ecx
; SDAG-X86-NEXT:    adcl {{[0-9]+}}(%esp), %edx
; SDAG-X86-NEXT:    addl $1, %esi
; SDAG-X86-NEXT:    adcl $0, %edi
; SDAG-X86-NEXT:    adcl $0, %ecx
; SDAG-X86-NEXT:    adcl $0, %edx
; SDAG-X86-NEXT:    movl %edi, 4(%eax)
; SDAG-X86-NEXT:    movl %esi, (%eax)
; SDAG-X86-NEXT:    movl %ecx, 8(%eax)
; SDAG-X86-NEXT:    movl %edx, 12(%eax)
; SDAG-X86-NEXT:    popl %esi
; SDAG-X86-NEXT:    popl %edi
; SDAG-X86-NEXT:    retl $4
;
; FAST-X86-LABEL: add_i128:
; FAST-X86:       # %bb.0:
; FAST-X86-NEXT:    pushl %edi
; FAST-X86-NEXT:    pushl %esi
; FAST-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; FAST-X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; FAST-X86-NEXT:    movl {{[0-9]+}}(%esp), %edx
; FAST-X86-NEXT:    movl {{[0-9]+}}(%esp), %esi
; FAST-X86-NEXT:    movl {{[0-9]+}}(%esp), %edi
; FAST-X86-NEXT:    addl {{[0-9]+}}(%esp), %edi
; FAST-X86-NEXT:    adcl {{[0-9]+}}(%esp), %esi
; FAST-X86-NEXT:    adcl {{[0-9]+}}(%esp), %edx
; FAST-X86-NEXT:    adcl {{[0-9]+}}(%esp), %ecx
; FAST-X86-NEXT:    addl $1, %edi
; FAST-X86-NEXT:    adcl $0, %esi
; FAST-X86-NEXT:    adcl $0, %edx
; FAST-X86-NEXT:    adcl $0, %ecx
; FAST-X86-NEXT:    movl %edi, (%eax)
; FAST-X86-NEXT:    movl %esi, 4(%eax)
; FAST-X86-NEXT:    movl %edx, 8(%eax)
; FAST-X86-NEXT:    movl %ecx, 12(%eax)
; FAST-X86-NEXT:    popl %esi
; FAST-X86-NEXT:    popl %edi
; FAST-X86-NEXT:    retl $4
;
; GISEL-X86-LABEL: add_i128:
; GISEL-X86:       # %bb.0:
; GISEL-X86-NEXT:    pushl %edi
; GISEL-X86-NEXT:    pushl %esi
; GISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; GISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; GISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %edx
; GISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %esi
; GISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %edi
; GISEL-X86-NEXT:    addl $1, %ecx
; GISEL-X86-NEXT:    adcl $0, %edx
; GISEL-X86-NEXT:    adcl $0, %esi
; GISEL-X86-NEXT:    adcl $0, %edi
; GISEL-X86-NEXT:    addl {{[0-9]+}}(%esp), %ecx
; GISEL-X86-NEXT:    adcl {{[0-9]+}}(%esp), %edx
; GISEL-X86-NEXT:    adcl {{[0-9]+}}(%esp), %esi
; GISEL-X86-NEXT:    adcl {{[0-9]+}}(%esp), %edi
; GISEL-X86-NEXT:    movl %ecx, (%eax)
; GISEL-X86-NEXT:    movl %edx, 4(%eax)
; GISEL-X86-NEXT:    movl %esi, 8(%eax)
; GISEL-X86-NEXT:    movl %edi, 12(%eax)
; GISEL-X86-NEXT:    popl %esi
; GISEL-X86-NEXT:    popl %edi
; GISEL-X86-NEXT:    retl
;
; X64-LABEL: add_i128:
; X64:       # %bb.0:
; X64-NEXT:    movq %rdi, %rax
; X64-NEXT:    addq %rdx, %rax
; X64-NEXT:    adcq %rcx, %rsi
; X64-NEXT:    addq $1, %rax
; X64-NEXT:    adcq $0, %rsi
; X64-NEXT:    movq %rsi, %rdx
; X64-NEXT:    retq
;
; GISEL-X64-LABEL: add_i128:
; GISEL-X64:       # %bb.0:
; GISEL-X64-NEXT:    movq %rdi, %rax
; GISEL-X64-NEXT:    addq $1, %rax
; GISEL-X64-NEXT:    adcq $0, %rsi
; GISEL-X64-NEXT:    addq %rdx, %rax
; GISEL-X64-NEXT:    adcq %rcx, %rsi
; GISEL-X64-NEXT:    movq %rsi, %rdx
; GISEL-X64-NEXT:    retq
  %t0 = add i128 %x, 1
  %t1 = add i128 %y, %t0
  ret i128 %t1
}

; PR42486
define <1 x i128> @add_v1i128(<1 x i128> %x, <1 x i128> %y) nounwind {
; SDAG-X86-LABEL: add_v1i128:
; SDAG-X86:       # %bb.0:
; SDAG-X86-NEXT:    pushl %edi
; SDAG-X86-NEXT:    pushl %esi
; SDAG-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; SDAG-X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; SDAG-X86-NEXT:    movl {{[0-9]+}}(%esp), %edx
; SDAG-X86-NEXT:    movl {{[0-9]+}}(%esp), %esi
; SDAG-X86-NEXT:    movl {{[0-9]+}}(%esp), %edi
; SDAG-X86-NEXT:    addl {{[0-9]+}}(%esp), %esi
; SDAG-X86-NEXT:    adcl {{[0-9]+}}(%esp), %edi
; SDAG-X86-NEXT:    adcl {{[0-9]+}}(%esp), %ecx
; SDAG-X86-NEXT:    adcl {{[0-9]+}}(%esp), %edx
; SDAG-X86-NEXT:    addl $1, %esi
; SDAG-X86-NEXT:    adcl $0, %edi
; SDAG-X86-NEXT:    adcl $0, %ecx
; SDAG-X86-NEXT:    adcl $0, %edx
; SDAG-X86-NEXT:    movl %edi, 4(%eax)
; SDAG-X86-NEXT:    movl %esi, (%eax)
; SDAG-X86-NEXT:    movl %ecx, 8(%eax)
; SDAG-X86-NEXT:    movl %edx, 12(%eax)
; SDAG-X86-NEXT:    popl %esi
; SDAG-X86-NEXT:    popl %edi
; SDAG-X86-NEXT:    retl $4
;
; FAST-X86-LABEL: add_v1i128:
; FAST-X86:       # %bb.0:
; FAST-X86-NEXT:    pushl %edi
; FAST-X86-NEXT:    pushl %esi
; FAST-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; FAST-X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; FAST-X86-NEXT:    movl {{[0-9]+}}(%esp), %edx
; FAST-X86-NEXT:    movl {{[0-9]+}}(%esp), %esi
; FAST-X86-NEXT:    movl {{[0-9]+}}(%esp), %edi
; FAST-X86-NEXT:    addl {{[0-9]+}}(%esp), %edi
; FAST-X86-NEXT:    adcl {{[0-9]+}}(%esp), %esi
; FAST-X86-NEXT:    adcl {{[0-9]+}}(%esp), %edx
; FAST-X86-NEXT:    adcl {{[0-9]+}}(%esp), %ecx
; FAST-X86-NEXT:    addl $1, %edi
; FAST-X86-NEXT:    adcl $0, %esi
; FAST-X86-NEXT:    adcl $0, %edx
; FAST-X86-NEXT:    adcl $0, %ecx
; FAST-X86-NEXT:    movl %edi, (%eax)
; FAST-X86-NEXT:    movl %esi, 4(%eax)
; FAST-X86-NEXT:    movl %edx, 8(%eax)
; FAST-X86-NEXT:    movl %ecx, 12(%eax)
; FAST-X86-NEXT:    popl %esi
; FAST-X86-NEXT:    popl %edi
; FAST-X86-NEXT:    retl $4
;
; GISEL-X86-LABEL: add_v1i128:
; GISEL-X86:       # %bb.0:
; GISEL-X86-NEXT:    pushl %edi
; GISEL-X86-NEXT:    pushl %esi
; GISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; GISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; GISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %edx
; GISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %esi
; GISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %edi
; GISEL-X86-NEXT:    addl $1, %ecx
; GISEL-X86-NEXT:    adcl $0, %edx
; GISEL-X86-NEXT:    adcl $0, %esi
; GISEL-X86-NEXT:    adcl $0, %edi
; GISEL-X86-NEXT:    addl {{[0-9]+}}(%esp), %ecx
; GISEL-X86-NEXT:    adcl {{[0-9]+}}(%esp), %edx
; GISEL-X86-NEXT:    adcl {{[0-9]+}}(%esp), %esi
; GISEL-X86-NEXT:    adcl {{[0-9]+}}(%esp), %edi
; GISEL-X86-NEXT:    movl %ecx, (%eax)
; GISEL-X86-NEXT:    movl %edx, 4(%eax)
; GISEL-X86-NEXT:    movl %esi, 8(%eax)
; GISEL-X86-NEXT:    movl %edi, 12(%eax)
; GISEL-X86-NEXT:    popl %esi
; GISEL-X86-NEXT:    popl %edi
; GISEL-X86-NEXT:    retl
;
; X64-LABEL: add_v1i128:
; X64:       # %bb.0:
; X64-NEXT:    movq %rdi, %rax
; X64-NEXT:    addq %rdx, %rax
; X64-NEXT:    adcq %rcx, %rsi
; X64-NEXT:    movq %rax, %xmm0
; X64-NEXT:    movq %rsi, %xmm1
; X64-NEXT:    punpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm1[0]
; X64-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[2,3,2,3]
; X64-NEXT:    movq %xmm0, %rdx
; X64-NEXT:    addq $1, %rax
; X64-NEXT:    adcq $0, %rdx
; X64-NEXT:    retq
;
; GISEL-X64-LABEL: add_v1i128:
; GISEL-X64:       # %bb.0:
; GISEL-X64-NEXT:    movq %rdi, %rax
; GISEL-X64-NEXT:    addq $1, %rax
; GISEL-X64-NEXT:    adcq $0, %rsi
; GISEL-X64-NEXT:    addq %rdx, %rax
; GISEL-X64-NEXT:    adcq %rcx, %rsi
; GISEL-X64-NEXT:    movq %rsi, %rdx
; GISEL-X64-NEXT:    retq
  %t0 = add <1 x i128> %x, <i128 1>
  %t1 = add <1 x i128> %y, %t0
  ret <1 x i128> %t1
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; FAST-X64: {{.*}}
; SDAG-X64: {{.*}}
; X86: {{.*}}
