; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc < %s -global-isel=0                    -mtriple=x86_64-linux-gnu | FileCheck %s --check-prefixes=X64
; RUN: llc < %s -fast-isel -fast-isel-abort=1     -mtriple=x86_64-linux-gnu | FileCheck %s --check-prefixes=X64
; RUN: llc < %s -global-isel -global-isel-abort=1 -mtriple=x86_64-linux-gnu | FileCheck %s --check-prefixes=GISEL-X64
; RUN: llc < %s -global-isel=0                    -mtriple=i686-linux-gnu   | FileCheck %s --check-prefixes=X86,SDAG-X86
; RUN: llc < %s -fast-isel -fast-isel-abort=1     -mtriple=i686-linux-gnu   | FileCheck %s --check-prefixes=X86,FAST-X86
; RUN: llc < %s -global-isel -global-isel-abort=1 -mtriple=i686-linux-gnu   | FileCheck %s --check-prefixes=GISEL-X86

define i64 @test_add_i64(i64 %arg1, i64 %arg2) {
; X64-LABEL: test_add_i64:
; X64:       # %bb.0:
; X64-NEXT:    leaq (%rdi,%rsi), %rax
; X64-NEXT:    retq
;
; GISEL-X64-LABEL: test_add_i64:
; GISEL-X64:       # %bb.0:
; GISEL-X64-NEXT:    leaq (%rsi,%rdi), %rax
; GISEL-X64-NEXT:    retq
;
; SDAG-X86-LABEL: test_add_i64:
; SDAG-X86:       # %bb.0:
; SDAG-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; SDAG-X86-NEXT:    movl {{[0-9]+}}(%esp), %edx
; SDAG-X86-NEXT:    addl {{[0-9]+}}(%esp), %eax
; SDAG-X86-NEXT:    adcl {{[0-9]+}}(%esp), %edx
; SDAG-X86-NEXT:    retl
;
; FAST-X86-LABEL: test_add_i64:
; FAST-X86:       # %bb.0:
; FAST-X86-NEXT:    movl {{[0-9]+}}(%esp), %edx
; FAST-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; FAST-X86-NEXT:    addl {{[0-9]+}}(%esp), %eax
; FAST-X86-NEXT:    adcl {{[0-9]+}}(%esp), %edx
; FAST-X86-NEXT:    retl
;
; GISEL-X86-LABEL: test_add_i64:
; GISEL-X86:       # %bb.0:
; GISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; GISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %edx
; GISEL-X86-NEXT:    addl {{[0-9]+}}(%esp), %eax
; GISEL-X86-NEXT:    adcl {{[0-9]+}}(%esp), %edx
; GISEL-X86-NEXT:    retl
  %ret = add i64 %arg1, %arg2
  ret i64 %ret
}

define i32 @test_add_i32(i32 %arg1, i32 %arg2) {
; X64-LABEL: test_add_i32:
; X64:       # %bb.0:
; X64-NEXT:    # kill: def $esi killed $esi def $rsi
; X64-NEXT:    # kill: def $edi killed $edi def $rdi
; X64-NEXT:    leal (%rdi,%rsi), %eax
; X64-NEXT:    retq
;
; GISEL-X64-LABEL: test_add_i32:
; GISEL-X64:       # %bb.0:
; GISEL-X64-NEXT:    # kill: def $edi killed $edi def $rdi
; GISEL-X64-NEXT:    # kill: def $esi killed $esi def $rsi
; GISEL-X64-NEXT:    leal (%rsi,%rdi), %eax
; GISEL-X64-NEXT:    retq
;
; X86-LABEL: test_add_i32:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    addl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    retl
;
; GISEL-X86-LABEL: test_add_i32:
; GISEL-X86:       # %bb.0:
; GISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; GISEL-X86-NEXT:    addl {{[0-9]+}}(%esp), %eax
; GISEL-X86-NEXT:    retl
  %ret = add i32 %arg1, %arg2
  ret i32 %ret
}


define i16 @test_add_i16(i16 %arg1, i16 %arg2) {
; X64-LABEL: test_add_i16:
; X64:       # %bb.0:
; X64-NEXT:    # kill: def $esi killed $esi def $rsi
; X64-NEXT:    # kill: def $edi killed $edi def $rdi
; X64-NEXT:    leal (%rdi,%rsi), %eax
; X64-NEXT:    # kill: def $ax killed $ax killed $eax
; X64-NEXT:    retq
;
; GISEL-X64-LABEL: test_add_i16:
; GISEL-X64:       # %bb.0:
; GISEL-X64-NEXT:    # kill: def $edi killed $edi def $rdi
; GISEL-X64-NEXT:    # kill: def $esi killed $esi def $rsi
; GISEL-X64-NEXT:    leal (%rsi,%rdi), %eax
; GISEL-X64-NEXT:    # kill: def $ax killed $ax killed $eax
; GISEL-X64-NEXT:    retq
;
; X86-LABEL: test_add_i16:
; X86:       # %bb.0:
; X86-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    addw {{[0-9]+}}(%esp), %ax
; X86-NEXT:    retl
;
; GISEL-X86-LABEL: test_add_i16:
; GISEL-X86:       # %bb.0:
; GISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; GISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; GISEL-X86-NEXT:    addw %cx, %ax
; GISEL-X86-NEXT:    # kill: def $ax killed $ax killed $eax
; GISEL-X86-NEXT:    retl
  %ret = add i16 %arg1, %arg2
  ret i16 %ret
}

define i8 @test_add_i8(i8 %arg1, i8 %arg2) {
; X64-LABEL: test_add_i8:
; X64:       # %bb.0:
; X64-NEXT:    # kill: def $esi killed $esi def $rsi
; X64-NEXT:    # kill: def $edi killed $edi def $rdi
; X64-NEXT:    leal (%rdi,%rsi), %eax
; X64-NEXT:    # kill: def $al killed $al killed $eax
; X64-NEXT:    retq
;
; GISEL-X64-LABEL: test_add_i8:
; GISEL-X64:       # %bb.0:
; GISEL-X64-NEXT:    # kill: def $edi killed $edi def $rdi
; GISEL-X64-NEXT:    # kill: def $esi killed $esi def $rsi
; GISEL-X64-NEXT:    leal (%rsi,%rdi), %eax
; GISEL-X64-NEXT:    # kill: def $al killed $al killed $eax
; GISEL-X64-NEXT:    retq
;
; X86-LABEL: test_add_i8:
; X86:       # %bb.0:
; X86-NEXT:    movzbl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    addb {{[0-9]+}}(%esp), %al
; X86-NEXT:    retl
;
; GISEL-X86-LABEL: test_add_i8:
; GISEL-X86:       # %bb.0:
; GISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; GISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; GISEL-X86-NEXT:    addb %cl, %al
; GISEL-X86-NEXT:    # kill: def $al killed $al killed $eax
; GISEL-X86-NEXT:    retl
  %ret = add i8 %arg1, %arg2
  ret i8 %ret
}

define i1 @test_add_i1(i1 %arg1, i1 %arg2) {
; X64-LABEL: test_add_i1:
; X64:       # %bb.0:
; X64-NEXT:    # kill: def $esi killed $esi def $rsi
; X64-NEXT:    # kill: def $edi killed $edi def $rdi
; X64-NEXT:    leal (%rdi,%rsi), %eax
; X64-NEXT:    # kill: def $al killed $al killed $eax
; X64-NEXT:    retq
;
; GISEL-X64-LABEL: test_add_i1:
; GISEL-X64:       # %bb.0:
; GISEL-X64-NEXT:    # kill: def $edi killed $edi def $rdi
; GISEL-X64-NEXT:    # kill: def $esi killed $esi def $rsi
; GISEL-X64-NEXT:    leal (%rsi,%rdi), %eax
; GISEL-X64-NEXT:    # kill: def $al killed $al killed $eax
; GISEL-X64-NEXT:    retq
;
; X86-LABEL: test_add_i1:
; X86:       # %bb.0:
; X86-NEXT:    movzbl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    addb {{[0-9]+}}(%esp), %al
; X86-NEXT:    retl
;
; GISEL-X86-LABEL: test_add_i1:
; GISEL-X86:       # %bb.0:
; GISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; GISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; GISEL-X86-NEXT:    addb %cl, %al
; GISEL-X86-NEXT:    # kill: def $al killed $al killed $eax
; GISEL-X86-NEXT:    retl
  %x = add i1 %arg1 , %arg2
  ret i1 %x
}
